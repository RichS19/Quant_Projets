import pandas as pd
import yfinance as yf

# Define a list of assets and a time period
assets = ['AAPL', 'MSFT', 'GOOGL', 'TSLA']
start_date = '2020-01-01'
end_date = '2022-12-31'

# Retrieve historical data
data = yf.download(assets, start=start_date, end=end_date)

# Calculate daily returns
returns = data['Adj Close'].pct_change()
from pypfopt.efficient_frontier import EfficientFrontier
from pypfopt import risk_models
from pypfopt import expected_returns

# Calculate expected returns and sample covariance
mu = expected_returns.mean_historical_return(returns)
S = risk_models.sample_cov(returns)

# Optimize the portfolio
ef = EfficientFrontier(mu, S)
weights = ef.max_sharpe()
cleaned_weights = ef.clean_weights()

# Display the optimized portfolio allocation
print(cleaned_weights)

from pypfopt import base_optimizer
from pypfopt import plotting

# Calculate cumulative returns
cumulative_returns = (returns + 1).cumprod()

# Calculate portfolio returns
portfolio_returns = (cumulative_returns * pd.Series(cleaned_weights)).sum(axis=1)

# Calculate portfolio volatility
portfolio_volatility = base_optimizer.portfolio_performance(mu, S)['volatility']

# Calculate the Sharpe ratio
sharpe_ratio = (portfolio_returns.mean() - 0.03) / portfolio_volatility

# Plot cumulative returns
plotting.plot_cumulative_returns(cumulative_returns)

import matplotlib.pyplot as plt

# Plot portfolio returns
plt.figure(figsize=(10, 5))
plt.plot(portfolio_returns.index, portfolio_returns, label='Portfolio Returns')
plt.xlabel('Date')
plt.ylabel('Returns')
plt.legend()
plt.title('Portfolio Returns Over Time')
plt.show()

